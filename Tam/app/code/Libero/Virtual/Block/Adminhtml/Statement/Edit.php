<?php
namespace Libero\Virtual\Block\Adminhtml\Statement;
use Magento\Backend\Block\Widget\Context;
use Magento\Framework\Registry;

class Edit extends \Magento\Framework\View\Element\Template{
    protected $_coreRegistry = null;

    public function __construct(
        Context $context,
        Registry $registry,
        array $data = []
    ) {
        $this->_coreRegistry = $registry;
        parent::__construct($context, $data);
    }
    public function getDataFromEdit(){
        $model = $this->_coreRegistry->registry('libero_virtual');
        $dataRet = array();
        $dataRet["id_statement"]= $model->getData("id_statement");
        $dataRet["id_customer"] =  $model->getData("id_customer");
        $dataRet["amount"] = $model->getData("amount");
        $dataRet["status"] = $model->getData("status");
        $dataRet["content"] = $model->getData("content");
        $dataRet["date_of_pay"] = $model->getData("date_of_pay");
        return $dataRet;
    }
    public function getAdminUrl()
    {
        $route = "virtual/index/save/";
        $params = [];
        return $this->getUrl($route, $params);
    }
    /*protected function _construct()
    {
        $this->_objectId = 'id';
        $this->_controller = 'adminhtml_index';
        $this->_blockGroup = "Libero_Virtual";
        parent::_construct(); // TODO: Change the autogenerated stub
        $this->buttonList->update('save', 'label', __('Save'));

        $this->buttonList->update('delete', 'label', __('Delete'));
    }
    public function getHeaderText()
    {
        $statementRegistry = $this->_coreRegistry->registry('libero_virtual');
        if ($statementRegistry->getData("id")) {
            $newsTitle = $this->escapeHtml($statementRegistry->getData("id"));
            return __("Edit Statement '%1'", $newsTitle);
        } else {

        }
    }
    protected function _prepareLayout()
    {
        $this->buttonList->add(
            'saveandcontinue',
            [
                'label' => __('Save and Continue Edit'),
                'class' => 'save',
                'data_attribute' => [
                    'mage-init' => [
                        'button' => [
                            'event' => 'saveAndContinueEdit',
                            'target' => '#edit_form'
                        ]
                    ]
                ]
            ],
            0
        );
        $this->_formScripts[] = "
            function toggleEditor() {
                if (tinyMCE.getInstanceById('post_content') == null) {
                    tinyMCE.execCommand('mceAddControl', false, 'post_content');
                } else {
                    tinyMCE.execCommand('mceRemoveControl', false, 'post_content');
                }
            };
        ";
        return parent::_prepareLayout();
    }*/
}