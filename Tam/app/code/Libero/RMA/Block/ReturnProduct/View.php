<?php
namespace Libero\RMA\Block\ReturnProduct;

class View extends \Magento\Customer\Block\Account\Dashboard\Info
{
    protected $_productRepository;
    protected $_productImageHelper;
    public function __construct(\Magento\Framework\View\Element\Template\Context $context,
                                \Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer,
                                \Magento\Newsletter\Model\SubscriberFactory $subscriberFactory,
                                \Magento\Customer\Helper\View $helperView,
                                \Magento\Catalog\Model\ProductRepository $productRepository,
                                \Magento\Catalog\Helper\Image $productImageHelper,
                                array $data)
    {
        $this->_productRepository = $productRepository;
        $this->_productImageHelper = $productImageHelper;
        parent::__construct($context, $currentCustomer, $subscriberFactory, $helperView, $data);
    }

    /*public function __construct(
        \Magento\Backend\Block\Template\Context $context,
        \Magento\Catalog\Model\ProductRepository $productRepository,
        \Magento\Catalog\Helper\Image $productImageHelper,
        array $data = []
    )
    {
        $this->_productRepository = $productRepository;
        $this->_productImageHelper = $productImageHelper;
        parent::__construct($context, $data); // TODO: Change the autogenerated stub
    }*/

    public function getVirtualMoney(){
        $customerID = $this->getCustomer()->getId();
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $customerObj = $objectManager->create('Magento\Customer\Model\Customer')->load($customerID);
        return $customerObj->getData("virtual_money");
    }
    public function getIdCustomer(){
        $customerID = $this->getCustomer()->getId();
        return $customerID;
    }
    public function getNameCustomer()
    {
        return $this->getCustomer()->getFirstname()." ".$this->getCustomer()->getLastname();
    }
    public function getEmailCustomer(){
        return $this->getCustomer()->getEmail();
    }
    public function getOrderInXDay(){
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $customerId = $this->getIdCustomer();
        $dateAfter = date('Y/m/d',strtotime("-15 days"));
        $orderReturn = $objectManager->create('\Magento\Sales\Model\Order')->getCollection()
            //->addFieldToFilter(array("created_at","status"),array(array("gt" => $dateAfter),array("neq" => "processing")))
            ->addFieldToFilter("created_at",array("gt" => $dateAfter))
            ->addFieldToFilter("status",array("neq" => "complete"))
            ->addFieldToFilter("customer_id",array("eq" => $customerId));
        return $orderReturn;
    }
    public function getDataReturnProduct(){
        $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $customerId = $this->getIdCustomer();
        $customerObj = $objectManager->create('Libero\RMA\Model\ResourceModel\RequestProduct\Collection')->addFieldToFilter("customer_email",$this->getCustomer()->getEmail());
        $returnData = $customerObj;
        return $returnData;
    }
    public function resizeImage($product, $imageId, $width, $height = null)
    {
        $resizedImage = $this->_productImageHelper
            ->init($product, $imageId)
            ->constrainOnly(TRUE)
            ->keepAspectRatio(TRUE)
            ->keepTransparency(TRUE)
            ->keepFrame(FALSE)
            ->resize($width, $height);
        return $resizedImage;
    }
}